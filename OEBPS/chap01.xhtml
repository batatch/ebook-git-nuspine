<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:mbp="http://www.mobipocket.com/mbp" xml:lang="ja" lang="ja">

<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="content-style-type" content="text/css" />
<link rel="stylesheet" href="stylesheet.css" type="text/css" />
<title>1.　バージョン管理の概要</title>
<style type="text/css">
</style>
</head>

<body>

<a name="c1" />
<h1>1.　バージョン管理の概要</h1>

<a name="c1-1" />
<h2>1.1　バージョン管理とは</h2>

<p>バージョン管理システムは VCS(Version Control System)や、SCM(Source Code Management)と表記されます。
主にプログラムの開発で、ソースコードやその他のファイル、データを管理するためのシステムです。
</p>

<p>バージョン管理システムを用いるのには、以下のような目的があります。
</p>

<h4>バックアップを作る</h4>

<p>プログラムの開発や、文書の作成などの作業をしていると「昨日の状態に戻したい」というように、作業する前の状態に戻したいことがあります。
毎日の作業のルールとして「sample.txt」を「20091101T1_sample.txt」のように日付付きのファイルにコピーして、バックアップを作っておけば、以前の状態に戻すことができます。
</p>

<p>しかし、複数のファイルの管理や、グループで共有、またプログラム開発など長期間の作業では、バックアップファイルがあふれてしまい、収拾が付かなくなってくるでしょう。</p>

<p>バージョン管理システムを使えば、バックアップの作成や、以前の状態に戻すということが、スムーズに行えるようになります。
</p>

<h4>変更をひとつの塊として記録する</h4>

<p>バックアップがあれば、以前の状態に戻せるようになりますが、昨日の時点にすべて戻されるのは何かと不便です。
あるバグ修正に関する変更というように、ひとつの完結した変更の塊の単位で、参照したり、戻したいということがあります。
</p>

<p>プログラム開発では、ソースコードの変更と設定ファイルへの項目の追加というように、複数ファイルの変更でひとつの完結した変更を表すことがよくあります。
バージョン管理システムでは、このように複数ファイルにまたがる変更をひとつの塊として扱います。
</p>

<p>また、変更内容だけでなく、「なぜ、そのように変更したか」や「誰が変更したか」など、変更に関する情報をあわせて記録します。
したがって、あとから作業を振り返ったり、他の人が参照するときに、変更内容を理解しやすくなります。
</p>

<h4>変更の履歴を参照する</h4>

<p>ひとまとまりの変更を記録していくことで、過去にどのような変更が行われたかを振り返ることができます。
プログラムの開発で何か問題が発生したときに、どの変更が原因になっているかを調べることが簡単になります。
</p>

<p>また、変更の記録を時系列に並べることによって、変更履歴を系統としてみることができます。
過去のある時点のファイルを元に、別の顧客向けのカスタマイズ版を作りたいときには、履歴の系統を分岐させることもできます。
</p>

<p>バージョン管理システムでは、通常このように変更履歴の系統を分岐、統合させる機能が用意されていて、複数のリリースに対する作業を一元的に管理することができようになっています。
</p>




<mbp:pagebreak />

<a name="c1-2" />
<h2>1.2　リポジトリ、リビジョン、コミット、チェックアウト</h2>

<p>ここでは、git に限らずバージョン管理システムの概念を理解するために重要となるキーワードをいくつか説明します。
</p>

<h4>リポジトリ</h4>

<p>変更の記録を蓄積するデータベースを「リポジトリ」といいます。
リポジトリのデータ形式はバージョン管理システムごとに異なり、バージョン管理を始める最初の作業がリポジトリの作成となります。
</p>

<h4>リビジョン</h4>

<p>リポジトリに蓄積された変更には、それぞれなんらかのバージョンがつけられ「リビジョン」と呼ばれます。
リビジョンの形式はバージョン管理システムによって異なり、番号とは限りません。
リポジトリから変更の履歴を検索する際のキー情報となります。
</p>

<h4>コミット</h4>

<p>リポジトリに変更を記録することを「コミット」、もしくは「コミットする」といいます。
また、記録する変更の情報のことを「コミット」や「チェンジセット」といいます。
バージョン管理システムによっては、コミット中に他のユーザがコミットできないよう、リポジトリをロックする仕組みを持つものもあります。
</p>

<h4>チェックアウト</h4>

<p>リポジトリからデータを取り出すことを「チェックアウト」といいます。
リポジトリに登録されている情報には管理情報などが追加され、そのままでは参照や編集、プログラムのビルドなどの作業ができません。
ファイルの編集などは、リポジトリからチェックアウトして取り出したファイルに対して行います。
リポジトリからデータを取り出すのを「チェックアウト」というのに対し、データを登録するコミットのことを「チェックイン」ということもあります。
</p>

<div class="fig">
<img width="470" height="210" src="chap01.files/image002.png" />
<p>図1.1　バージョン管理システムの概要</p>
</div>




<mbp:pagebreak />

<a name="c1-3" />
<h2>1.3　ブランチ、マージ</h2>

<p>バージョン管理システムでは、リポジトリに記録される変更の系列を分岐することができ、その分岐した系統のことを「ブランチ」といいます。
ブランチを作成することを、単に「ブランチ」や、「ブランチする」「ブランチを切る」といいます。
</p>

<p>プログラム開発では、ひとつのプロジェクトを、ある時点で仕様を固定し、その後はバグ修正だけを行うファイル(安定版)と、
新しい機能を追加していくファイル(開発版)に分けたいことがあります。
ブランチを使うと、まったく別のリポジトリとして作るのではなく、１つのリポジトリの中に仮想的に複数のリポジトリを持つような状態にすることができます。
そうすれば、バグ修正の変更は安定版にも開発版にも記録し、機能追加の変更は開発版のみに記録するというように、
必要な情報を共有することができます。
</p>

<p>変更の系列の分岐があれば、統合もあり、二つ以上のブランチを統合することを「マージ」といいます。
ブランチが並列作業の開始とすれば、マージは並列作業の完了となります。
</p>




<mbp:pagebreak />

<a name="c1-4" />
<h2>1.4　分散型と集中型</h2>

<p>バージョン管理システムには大きく「集中型」、「分散型」の２種類があります。
これらの違いはリポジトリの数です。
集中型バージョン管理システムは、中央に１つだけリポジトリを持ち、複数のユーザはそこからファイルをチェックアウトして作業を行います。
ひとつのリポジトリを共有するので、グループのメンバは常に同じ情報を共有でき、管理者はひとつのリポジトリを管理すればいいのです。
ただし、ひとつのリポジトリを共有するため、ネットワークがつながらない場所で、リポジトリを参照、変更を記録することができないという不利点もあります。
また、リポジトリが唯一なのでバックアップが容易な反面、適切にバックアップをしていないと、プロジェクトの情報がすべて失われてしまう可能性があります。
</p>

<p>一方、分散型バージョン管理システムでは、複数のユーザはチェックアウトしたファイルだけでなく、リポジトリの複製を持ちます。
ファイルのチェックアウトやコミットなどの操作は、自分の手元のリポジトリに対して行い、適切なタイミングで手元のリポジトリから、共有のリポジトリへ変更を反映させることができます。
また、各ユーザが完全なリポジトリの複製を持つので、それぞれのリポジトリがバックアップとなり、障害の際の復帰が容易になります。
</p>

<p>分散型のシステムでは、手元のリポジトリに対してコミットを行い、任意のタイミングで他のユーザとの共有リポジトリに反映することができます。
つまり、変更を記録すること(コミットする)と、変更を公開すること(共有リポジトリへ反映)を分離することができるわけです。
</p>

<p>このような性質から、分散型バージョン管理システムには、以下のような利点があります。
</p>

<ul>
<li>ネットワークにつながっていなくても、手元のリポジトリにコミットして、変更を記録しながら作業ができる。
</li>

<li>集中型ではコミットすると他のユーザからも参照されるため、十分テストした上で慎重にコミットする必要があったが、
分散型では手元のリポジトリに大胆に実験的な変更も記録しながら作業ができ、十分安定してから他のユーザと共有することができる
</li>

<li>集中型では一度コミットした変更は取り消しが難しく、コミットの間違いや記録漏れの修正ができなかったが、
分散型では、手元のリポジトリで記録を整理し直してから、公開することができる
</li>
</ul>

<div class="fig">
<img width="286" height="275" src="chap01.files/image004.png" />
<img width="276" height="278" src="chap01.files/image006.png" />
<p>図1.2　集中型バージョン管理システムと分散型バージョン管理システム</p>
</div>

</body>

</html>
